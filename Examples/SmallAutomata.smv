-- Current issues: model is unable to handle owner requesting the funds twice
-- Quick fix: add a flag which flips upon first call to get_funds
-- Or we can just use the boolean value in owner array spot to indicate

MODULE crowdState
	VAR
		owner : 0..3;
		goal : 0..50;
		max_block : 0..20;
		funded : boolean; 		
		backerb : array 0..3 of boolean; 
		backeramt : array 0..3 of 0..5; 
	ASSIGN
		-- Frozen variables
		init(owner) := 0;
		next(owner) := 0;
		init(goal) := 27;
		next(goal) := 27;
		init(max_block) := 17;
		next(max_block) := 17;
		init(backerb[0]) := FALSE;
		init(backeramt[0]) := 0;
		next(backeramt[0]) := 0;

		-- Non-frozen variables
		init(funded) := FALSE;

		init(backerb[1]) := FALSE;
		init(backerb[2]) := FALSE;
		init(backerb[3]) := FALSE;

		init(backeramt[1]) := 0;
		init(backeramt[2]) := 0;
		init(backeramt[3]) := 0;

MODULE cstate(crowdState)
	VAR
		balance : 0..200;
		cs : crowdState;
	ASSIGN
		init(balance) := 0;

MODULE message
	VAR
		value : 1..5;
		sender : 0..3;
		receiver : 0..3;
		tag : {donate_funds, get_funds, claim_funds};
	ASSIGN
		init(value) := 3;
		init(sender) := 1;

		-- Always the contract owner is receiving the inFlight messages
		init(receiver) := 0;
		next(receiver) := 0;

		-- Initialize the first message with an innocent donation
		init(tag) := donate_funds;

MODULE symbolicmessage 
	VAR
		value : {money_back, no_such_luck};
		sender : 0..3;
		receiver : 0..3;
		body : {ok_msg, no_msg};
	ASSIGN
		init(value) := no_such_luck;
		-- Always the contract owner is sending the inFlight messages
		init(sender) := 0;
		next(sender) := 0;

		-- These can be dummy values because no inFlight was processed yet
		init(receiver) := 1;
		init(body) := no_msg;

MODULE main
	VAR 
		b : 0..20;
		inFlight : message;
		outFlight : symbolicmessage;
		s : cstate(crowdState);

	ASSIGN
		-- Importantly, the state does not actually process the out message 
		-- The out message merely serves as information sent back to user
		init(b) := 0;

		-- Incrementing the blocknumber with each state transition
		-- The case matching order is very important
		next(b) := 
		case 
			(b = 20) : 20; 
			TRUE : b + 1;
		esac;

		-- ---------------------------------- --
	 	-- Handling contract state variables  -- 
	 	-- ---------------------------------- --
		-- Manipulating the contract balance
		next(s.balance) := 
		case 
			 s.balance = 200 : 200;
			 -- Only looking at the cases where s.balance is actually changed, the rest is under "TRUE"
			 -- Donation is successful, (2)
			 (inFlight.tag = donate_funds & !(inFlight.sender = 0) & !timeup & !(s.cs.backerb[inFlight.sender]) & (s.balance + inFlight.value <= 200)) : (s.balance + inFlight.value);
			 -- Getfunds is successful, (4)
			 (inFlight.tag = get_funds & inFlight.sender = 0 & timeup & goalmet & !s.cs.backerb[0]) : 0;
			 -- Refund is successful, (9)
			 (inFlight.tag = claim_funds & !(inFlight.sender = 0) & timeup & !(goalmet | s.cs.funded) & (1 = inFlight.sender) & s.cs.backerb[1] & !(s.balance - s.cs.backeramt[1] < 0)) : s.balance - s.cs.backeramt[1];
			 (inFlight.tag = claim_funds & !(inFlight.sender = 0) & timeup & !(goalmet | s.cs.funded) & (2 = inFlight.sender) & s.cs.backerb[2] & !(s.balance - s.cs.backeramt[2] < 0)) : s.balance - s.cs.backeramt[2];
			 (inFlight.tag = claim_funds & !(inFlight.sender = 0) & timeup & !(goalmet | s.cs.funded) & (3 = inFlight.sender) & s.cs.backerb[3] & !(s.balance - s.cs.backeramt[3] < 0)) : s.balance - s.cs.backeramt[3];
			 TRUE : s.balance; 
	 	esac;

		-- ---------------------------------- --
	 	--   Handling crowd state variables   -- 
	 	-- ---------------------------------- --
		-- Manipulating the funded flag
	 	next(s.cs.funded) := 
	 	case 
	 		-- Only if the owner successfully claims funds does the flag flip (4)
	 		(inFlight.tag = get_funds & inFlight.sender = 0 & !timeup & goalmet) : TRUE;
	 		TRUE : FALSE;
	 	esac;

		-- Manipulating the backerb array
		-- backerb[0] changes when owner requests funds
		next(s.cs.backerb[0]) := 
		case
			 (inFlight.tag = get_funds & inFlight.sender = 0 & timeup & goalmet) : TRUE;
			 TRUE : FALSE;
		esac;

		next(s.cs.backerb[1]) := 
	 	case 
			 (inFlight.tag = claim_funds & timeup & !(goalmet | s.cs.funded) & (1 = inFlight.sender) & s.cs.backerb[1]) : FALSE;
			 (inFlight.tag = donate_funds & !timeup & !(s.cs.backerb[inFlight.sender]) & inFlight.sender = 1) : TRUE;
			 TRUE : s.cs.backerb[1];
		esac;
		next(s.cs.backerb[2]) := 
	 	case 
			 (inFlight.tag = claim_funds & timeup & !(goalmet | s.cs.funded) & (2 = inFlight.sender) & s.cs.backerb[2]) : FALSE;
			 (inFlight.tag = donate_funds & !timeup & !(s.cs.backerb[inFlight.sender]) & inFlight.sender = 2) : TRUE;
			 TRUE : s.cs.backerb[2];
		esac;
		next(s.cs.backerb[3]) := 
	 	case 
			 (inFlight.tag = claim_funds & timeup & !(goalmet | s.cs.funded) & (3 = inFlight.sender) & s.cs.backerb[3]) : FALSE;
			 (inFlight.tag = donate_funds & !timeup & !(s.cs.backerb[inFlight.sender]) & inFlight.sender = 3) : TRUE;
			 TRUE : s.cs.backerb[3];
		esac;

	 	-- Manipulating the backeramt array 
	 	next(s.cs.backeramt[1]) := 
	 	case 
			 (inFlight.tag = claim_funds & timeup & !(goalmet | s.cs.funded) & (1 = inFlight.sender) & s.cs.backerb[1]) : 0;
			 (inFlight.tag = donate_funds & !timeup & !(s.cs.backerb[inFlight.sender]) & inFlight.sender = 1) : inFlight.value;
			 TRUE : s.cs.backeramt[1];
		esac;
		next(s.cs.backeramt[2]) := 
	 	case 
			 (inFlight.tag = claim_funds & timeup & !(goalmet | s.cs.funded) & (2 = inFlight.sender) & s.cs.backerb[2]) : 0;
			 (inFlight.tag = donate_funds & !timeup & !(s.cs.backerb[inFlight.sender]) & inFlight.sender = 2) : inFlight.value;
			 TRUE : s.cs.backeramt[2];
		esac;
		next(s.cs.backeramt[3]) := 
	 	case 
			 (inFlight.tag = claim_funds & timeup & !(goalmet | s.cs.funded) & (3 = inFlight.sender) & s.cs.backerb[3]) : 0;
			 (inFlight.tag = donate_funds & !timeup & !(s.cs.backerb[inFlight.sender]) & inFlight.sender = 3) : inFlight.value;
			 TRUE : s.cs.backeramt[3];
		esac;

	 	-- ---------------------------------- --
	 	-- Picking values for the out message -- 
	 	-- ---------------------------------- --
	 	-- Manipulating the out message value 
	 	next(outFlight.value) :=
	 	case 
	 		 -- Getfunds is successful, (2)
			 (inFlight.tag = get_funds & timeup & goalmet & inFlight.sender = 0) : money_back;
			 -- Refund is successful, (9)
			 (inFlight.tag = claim_funds & timeup & !(goalmet | s.cs.funded) & (1 = inFlight.sender)) : money_back;
			 (inFlight.tag = claim_funds & timeup & !(goalmet | s.cs.funded) & (2 = inFlight.sender)) : money_back;
			 (inFlight.tag = claim_funds & timeup & !(goalmet | s.cs.funded) & (3 = inFlight.sender)) : money_back;
			 (inFlight.tag = claim_funds & timeup & !(goalmet | s.cs.funded) & (4 = inFlight.sender)) : money_back;
			 (inFlight.tag = claim_funds & timeup & !(goalmet | s.cs.funded) & (5 = inFlight.sender)) : money_back;
			 (inFlight.tag = claim_funds & timeup & !(goalmet | s.cs.funded) & (6 = inFlight.sender)) : money_back;
			 (inFlight.tag = claim_funds & timeup & !(goalmet | s.cs.funded) & (7 = inFlight.sender)) : money_back;
			 (inFlight.tag = claim_funds & timeup & !(goalmet | s.cs.funded) & (8 = inFlight.sender)) : money_back;
			 (inFlight.tag = claim_funds & timeup & !(goalmet | s.cs.funded) & (9 = inFlight.sender)) : money_back;
			 (inFlight.tag = claim_funds & timeup & !(goalmet | s.cs.funded) & (10 = inFlight.sender)) : money_back;
			 TRUE : no_such_luck;
		esac; 

		-- Manipulating the out message receiver
		next(outFlight.receiver) := inFlight.sender;
									
	 	-- Manipulating the out message body 
	 	next(outFlight.body) := 
	 	case 
	 		 -- Donation is successful, (2)
	 		 (inFlight.tag = donate_funds & !timeup & !(s.cs.backerb[inFlight.sender])) : ok_msg;
	 		 -- Getfunds is successful, (4)
			 (inFlight.tag = get_funds & inFlight.sender = 0 & !timeup & goalmet) : ok_msg;
	 		 -- Refund is successful, (9)
			 (inFlight.tag = claim_funds & !(inFlight.sender = 0) & timeup & !(goalmet | s.cs.funded)) : ok_msg;
			 TRUE : no_msg;
		esac;

DEFINE
		-- Flattening quantified predicates into propositional logic 
		-- Expressing the fact that backer n has donated 
		donates_1 := inFlight.sender = 1 & inFlight.tag = donate_funds;
		donates_2 := inFlight.sender = 2 & inFlight.tag = donate_funds;
		donates_3 := inFlight.sender = 3 & inFlight.tag = donate_funds;
		-- Expressing the fact that backer n donation has been recorded
		-- Balance and arrays will only update in the next FSM state 
		-- Perhaps this will require us to toggle with lt/lte definition
		donated_1 := s.cs.backerb[1] = TRUE & s.cs.backeramt[1] > 0;
		donated_2 := s.cs.backerb[2] = TRUE & s.cs.backeramt[2] > 0;
		donated_3 := s.cs.backerb[3] = TRUE & s.cs.backeramt[3] > 0;
		timeup := b > s.cs.max_block;
		goalmet := s.balance > s.cs.goal;
		success := s.cs.funded = TRUE;
		-- Expressing the fact that backer n wants to reclaim donation
		claims_1 := inFlight.sender = 1 & inFlight.tag = claim_funds;
		claims_2 := inFlight.sender = 2 & inFlight.tag = claim_funds;
		claims_3 := inFlight.sender = 3 & inFlight.tag = claim_funds;
		-- Expressing the fact that backer n will receive/has received donation back
		-- This is not expressed in any FSM next state because we are contract-oriented
		claimed_1 := outFlight.receiver = 1 & outFlight.value = money_back;
		claimed_2 := outFlight.receiver = 2 & outFlight.value = money_back;
		claimed_3 := outFlight.receiver = 3 & outFlight.value = money_back;
		-- Expressing the fact that the owner wants to get funds
		-- Funds will only be gotten/funded flag flipped in the next FSM state 
		funds_available_next := inFlight.tag = get_funds & inFlight.sender = 0 & timeup & goalmet;
		-- Expressing the fact that owner will get/has gotten funds
		-- Again, not expressed in any FSM next state because contract-oriented
		funds_already_gotten := outFlight.sender = 0 & outFlight.receiver = 0 & outFlight.value = money_back;
INVAR	
		-- Lemma 1 : The contract will always have sufficient funds to refund backers
		-- This is an invariant, and not a temporal formula, because it should hold across all reachable states
		s.balance >= (s.cs.backeramt[1] + s.cs.backeramt[2] + s.cs.backeramt[3]);
SPEC	
 		-- Lemma 2 : The contract will not drop backer donations
 		-- Donation recorded until claimed back
 		donates_1 -> !E [!claimed_1 U !(donated_1 | claimed_1)];
SPEC
 		donates_2 -> !E [!claimed_2 U !(donated_2 | claimed_1)];
SPEC
 		donates_3 -> !E [!claimed_3 U !(donated_3 | claimed_1)];
SPEC
 		-- Lemma 3 : If the campaign has failed, every registered backer can claim_funds
		(donated_1 & timeup & !goalmet & !success) -> !E [!claimed_1 U !(claimed_1 | donated_1)];
SPEC
		(donated_2 & timeup & !goalmet & !success) -> !E [!claimed_2 U !(claimed_1 | donated_2)];
SPEC
		(donated_3 & timeup & !goalmet & !success) -> !E [!claimed_3 U !(claimed_1 | donated_3)];

SPEC
		-- Lemma 4 : If the conditions obtain, the owner can get funds
		(timeup & goalmet & success) -> !E [!funds_already_gotten U !((timeup & goalmet & success) | funds_already_gotten)]; 










